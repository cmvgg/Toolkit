import pandas as pd
import joblib
from scipy.sparse import hstack
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.preprocessing import OneHotEncoder, StandardScaler

def fetch_cve_data(url):
    import requests
    import gzip
    import json
    from io import BytesIO
    
    try:
        response = requests.get(url)
        response.raise_for_status()
        with gzip.open(BytesIO(response.content)) as file:
            data = json.load(file)
        return pd.json_normalize(data['CVE_Items'])
    except requests.exceptions.RequestException as e:
        print(f"Error en la solicitud: {e}")
        return pd.DataFrame()
    except ValueError as e:
        print(f"Error al decodificar JSON: {e}")
        return pd.DataFrame()

def preprocess_data(data, vectorizer, encoder, scaler):
    if 'cve.description.description_data' not in data.columns:
        print("La columna 'description' no está en los datos.")
        return pd.DataFrame()

    data['description'] = data['cve.description.description_data'].apply(lambda x: ' '.join(d['value'] for d in x) if isinstance(x, list) else '')

    if 'impact.baseMetricV3.impactScore' not in data.columns:
        print("La columna 'impact_score' no está en los datos.")
        return pd.DataFrame()

    data['impact_score'] = pd.to_numeric(data['impact.baseMetricV3.impactScore'], errors='coerce').fillna(0)

    if 'cve.problemtype.problemtype_data' not in data.columns:
        print("La columna 'vulnerability_type' no está en los datos. Usando un tipo ficticio.")
        data['vulnerability_type'] = 'unknown'
    else:
        data['vulnerability_type'] = data['cve.problemtype.problemtype_data'].apply(lambda x: 'unknown' if pd.isna(x) else 'known')

    X_text = vectorizer.transform(data['description'])
    X_categoricals = encoder.transform(data[['vulnerability_type']])
    X_numeric = scaler.transform(data[['impact_score']])

    X_combined = hstack([X_text, X_categoricals, X_numeric])

    return pd.DataFrame.sparse.from_spmatrix(X_combined, columns=[f'feature_{i}' for i in range(X_combined.shape[1])])

def print_model_data(model_path, vectorizer_path, encoder_path, scaler_path, cve_urls):
    model = joblib.load(model_path)
    vectorizer = joblib.load(vectorizer_path)
    encoder = joblib.load(encoder_path)
    scaler = joblib.load(scaler_path)

    data = fetch_cve_data(cve_urls[0])
    print(f"Datos combinados: {data.shape[0]} filas y {data.shape[1]} columnas.")
    print("Información del DataFrame:")
    data.info()
    print("\nDescripción del DataFrame:")
    print(data.describe(include='all'))

    print("\nValores únicos en las columnas de tipo 'object':")
    object_columns = data.select_dtypes(include='object')
    for column in object_columns.columns:
        unique_values = data[column].apply(lambda x: str(x) if isinstance(x, list) else x).unique()
        print(f"Valores únicos en la columna '{column}':")
        print(unique_values)
        print()

    print(f"Columnas disponibles: {data.columns.tolist()}")

    X_combined = preprocess_data(data, vectorizer, encoder, scaler)

    print("\nPrimeras filas del conjunto de datos preprocesado:")
    print(X_combined.head())

    print("\nDescripción del DataFrame preprocesado:")
    print(X_combined.describe())

# Parámetros
model_path = 'cve_vulnerability_model.pkl'
vectorizer_path = 'vectorizer.pkl'
encoder_path = 'encoder.pkl'
scaler_path = 'scaler.pkl'
cve_urls = ['https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-2024.json.gz']

# Ejecutar el programa
print_model_data(model_path, vectorizer_path, encoder_path, scaler_path, cve_urls)
