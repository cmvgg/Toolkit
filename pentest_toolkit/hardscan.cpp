#include <pybind11/embed.h>
#include <iostream>
#include <fstream>
#include <vector>
#include <string>
#include <unordered_map>

namespace py = pybind11;

void initialize_python() {
    py::initialize_interpreter();
}

void finalize_python() {
    py::finalize_interpreter();
}

bool is_port_vulnerable(uint16_t port) {
    try {
        py::module_ model = py::module_::import("cve_model_training");
        py::object result = model.attr("predict_vulnerability")(port);
        return result.cast<bool>();
    } catch (const std::exception &e) {
        std::cerr << "Error en Python: " << e.what() << std::endl;
        return false;
    }
}

int main(int argc, char *argv[]) {
    if (argc != 3) {
        std::cerr << "Uso: " << argv[0] << " <IP_ADDRESS> <PORTS_FILE>" << std::endl;
        return 1;
    }

    std::string ip_address = argv[1];
    std::string ports_file_path = argv[2];

    std::ifstream ports_file(ports_file_path);
    if (!ports_file) {
        std::cerr << "Error abriendo el archivo de puertos." << std::endl;
        return 2;
    }

    std::vector<uint16_t> open_ports;
    uint16_t port;
    while (ports_file >> port) {
        open_ports.push_back(port);
    }
    ports_file.close();

    initialize_python();

    std::unordered_map<uint16_t, bool> port_vulnerabilities;
    for (auto port : open_ports) {
        port_vulnerabilities[port] = is_port_vulnerable(port);
    }

    finalize_python();

    std::ofstream result_file("vulnerable_ports.txt");
    if (!result_file) {
        std::cerr << "Error abriendo el archivo de resultados." << std::endl;
        return 3;
    }
    for (const auto &entry : port_vulnerabilities) {
        if (entry.second) {
            result_file << "Puerto " << entry.first << " es vulnerable." << std::endl;
        }
    }
    result_file.close();

    return 0;
}
