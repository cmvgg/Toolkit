import joblib
import pandas as pd
from scipy.sparse import hstack

def preprocess_sample_data(description, impact_score, vulnerability_type, vectorizer, encoder, scaler):
    description = [description]  # Convertir a lista para el vectorizador
    impact_score = [[impact_score]]  # Convertir a lista de listas para el escalador
    vulnerability_type = [[vulnerability_type]]  # Convertir a lista de listas para el codificador

    # Transformar la descripción usando el vectorizador
    X_text = vectorizer.transform(description)
    
    # Transformar el impacto usando el escalador
    X_numeric = scaler.transform(impact_score)
    
    # Transformar el tipo de vulnerabilidad usando el codificador
    X_categoricals = encoder.transform(vulnerability_type)  # Debe estar en formato 2D

    # Combinar todas las características
    return hstack([X_text, X_categoricals, X_numeric])

model_path = 'cve_vulnerability_model.pkl'
vectorizer_path = 'vectorizer.pkl'
encoder_path = 'encoder.pkl'
scaler_path = 'scaler.pkl'

# Cargar el modelo y los preprocesadores
model = joblib.load(model_path)
vectorizer = joblib.load(vectorizer_path)
encoder = joblib.load(encoder_path)
scaler = joblib.load(scaler_path)

# Datos de prueba
description = "Sample vulnerability description text for testing."
impact_score = 5.0
vulnerability_type = "known"

try:
    # Preprocesar los datos de prueba
    X_test = preprocess_sample_data(description, impact_score, vulnerability_type, vectorizer, encoder, scaler)
    
    # Verificar el tamaño de X_test
    print(f"Forma de X_test: {X_test.shape}")
    
    # Hacer la predicción
    prediction = model.predict(X_test)
    print(f"Predicción: {prediction[0]}")
except Exception as e:
    print(f"Error al hacer la predicción: {e}")
